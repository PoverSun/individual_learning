#考试要求：
'''
1.18号晚上8.30之前交到塔卡老师邮箱。
2.标注好第几题，一题一个截图，包含这个题的代码和运行结果。
3.独立思考完成，不允许讨论和查看网上资料。
4.不要放弃任何一道题，根据自己的思路能写多少就写多少。
5.每位同学都必须规定时间内交过来，实在做不出来的题标注好。
'''
# 题目1：
"""
给定一个任意的序列，对这个序列进行逆序输出

要求：
    1.不能直接使用序列切片方式。
    2.能够同时适用于字符串和元组

例如：
>>> reversed_sequence(('a','b','c'))
('c', 'b', 'a')
>>> reversed_sequence((1, 2, 3))
(3, 2, 1)
>>> reversed_sequence('abc')
'cba'
"""


# 题目2：
"""
给定一个任意的字符序列，将字符序列中的大写字母转换成小写，将小写字母转换成大写

要求：
1. 序列的每一项都是单个的字符
2. 对于非字母字符，不做处理

例如：
>>> converted_case('AaBbCc')
aAbBcC
>>> converted_case(('a', 'b', 'c', '-'))
('A', 'B', 'C', '-')
"""


# 题目3：
"""
输入一个序列，判断这个序列是升序，降序还是无序。

说明：排序规则，是Python默认的排序规则

要求：
  1. 如果是升序，输出'UP'
  2. 如果是降序，输出'DOWN'
  3. 如果无序，输出None

建议：整数序列或字符序列

例如：
>>> which_order('abc')
UP
>>> which_order([321])
DOWN
>>> which_order('132')
>>> 
"""


#题目4：
"""
输入一个字符串，统计出字符串中的元素的个数。

要求：
    1.字符不区分大小写，也就是'A'也算在'a'这个的个数上。
    2.返回一个固定28个键的字典，字典的28键'为：a-z26个小写字母，加上'whitespace'和'other'。
    3.字典的值为对应元素的个数，字符是空格则属于'whitespace',其他的字符为'other'。

提示：先创建一个28个键的字典，字典键对应的初始值都为0。

例如：
>>> charcount('123AA')
{'whitespase': 0, 'other': 3, 'a': 2, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}
>>> charcount('a b c d')
{'whitespase': 3, 'other': 0, 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}
>>> 
    
"""


#题目5：
"""
写一个属于你自己的 frange函数，frange与range类似，一样的参数规则，但是每一项必须要是float类型

要求：
1. 不能利用range等已有的功能来方便实现，要自己写逻辑
2. 输出只需要是个列表就好

例如：
>>> frange(10)
[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
>>> frange(1, 5)
[1.0, 2.0, 3.0, 4.0]
>>> frange(1, 10, 2)
[1.0, 3.0, 5.0, 7.0, 9.0]
>>> 
"""



#作业题。
'''
1.利用递归写斐波那契数列的函数f(n)。

注：(斐波那契数列：1,1,2,3,5,8,13,21,34,55,·······)

解析：    
f(1) = 1    
f(2) = 1  
f(3) = f(1) + f(2)
 .....
f(n) = f(n-2) + f(n-1)

2.输出100以内的所有素数，素数之间以一个空格区分。     
'''





